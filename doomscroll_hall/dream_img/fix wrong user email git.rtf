{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red244\green246\blue249;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c96471\c97255\c98039;}
\margl1440\margr1440\vieww13020\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs27\fsmilli13600 \cf2 \cb3 \expnd0\expndtw0\kerning0
#!/bin/sh\
\
git filter-branch --env-filter '\
\
OLD_EMAIL="tim00combs@gmail.com"\
CORRECT_NAME="tim combs"\
CORRECT_EMAIL="desolidstate@gmail.com"\
\
if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]\
then\
    export GIT_COMMITTER_NAME="$CORRECT_NAME"\
    export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"\
fi\
if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]\
then\
    export GIT_AUTHOR_NAME="$CORRECT_NAME"\
    export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"\
fi\
' --tag-name-filter cat -- --branches --tags\
\
After this is done go back to original repo then:\
git pull origin master --allow-unrelated-histories\
You may have to solve some merge conflicts.\
Strangely, you'll now have two commits for each original commit.\
One each for both the old and new user.email/user.name.}